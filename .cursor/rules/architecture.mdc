---
description: 
globs: 
alwaysApply: true
---
# Architecture Standards

## MVVM with SwiftUI

- Use MVVM architecture with SwiftUI for new UI components
- Follow protocol-oriented programming principles
- Prefer value types (structs) over reference types (classes) when possible
- Use `ObservableObject` and `@Published` properties for view models

## Swift Best Practices

- Use strong typing with proper optional handling (`if let`, `guard let`)
- Leverage `async/await` for asynchronous operations
- Use `Result` type for error handling scenarios
- Implement reactive programming with `@Published`, `@StateObject`, `@ObservedObject`
- Prefer `let` over `var` for immutable properties
- Use protocol extensions for shared functionality
- Follow SwiftLint rules defined in `.swiftlint.yml`
- Avoid force unwrapping (`!`) except in controlled scenarios
- Use computed properties where appropriate

## Naming Conventions

- Variables/Functions: `camelCase` (e.g., `searchViewModel`, `handleUserTap`)
- Types/Classes/Structs: `PascalCase` (e.g., `FeedbackViewModel`, `EcosiaHomeView`)
- Constants: `PascalCase` for static properties (e.g., `DefaultTimeout`)
- Methods: Use verbs (e.g., `fetchData`, `applyTheme`, `handleError`)
- Booleans: Use `is`/`has`/`should` prefixes (e.g., `isLoading`, `hasContent`, `shouldDisplay`)
- Enums: `PascalCase` with descriptive cases
- Clear, descriptive names following Apple's API Design Guidelines

## Code Review and Build Standards

- Explain proposed changes before implementation
- Verify project builds successfully before committing
- Address linter errors (max 3 iterations per file)
- Use SwiftLint rules defined in `.swiftlint.yml`
- Ensure code is immediately runnable by users
- Follow established coding patterns and architecture decisions
- Maintain consistency with existing codebase conventions
