version: 2.1

setup: true

# Add pipeline parameters for manual triggers
parameters:
  run-browserstack-tests:
    type: boolean
    default: false
  run-firebase-deploy:
    type: boolean
    default: false
  run-testflight-beta:
    type: boolean
    default: false
  run-release-deploy:
    type: boolean
    default: false

environment_common: &environment_common
  environment:
    CI: true

macos_common: &macos_common
  macos:
    xcode: "16.2"
  resource_class: macos.m1.medium.gen1

jobs:

  build-and-deploy-testflight-beta:
    <<: *environment_common
    <<: *macos_common
    steps:
      - checkout
      - macos/switch-ruby:
          version: "3.2"
      - restore_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
      - run:
          name: Bundle install
          command: bundle check || bundle install --path vendor/bundle
      - save_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          name: Verify github
          command: for ip in $(dig @8.8.8.8 github.com +short); do ssh-keyscan github.com,$ip; ssh-keyscan $ip; done 2>/dev/null >> ~/.ssh/known_hosts
      - run:
          name: extract Staging XCConfig
          command: echo "$STAGING_XCCONFIG" | base64 --decode > firefox-ios/Client/Configuration/Staging.xcconfig
      - run:
          name: Execute bootstrap
          command: ./bootstrap.sh
      - run:
          name: Build and deploy to Testflight
          command: bundle exec fastlane testflight_beta

  build-and-deploy-firebase-and-browserstack:
    <<: *environment_common
    <<: *macos_common
    steps:
      - checkout
      - macos/switch-ruby:
          version: "3.2"
      - restore_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
      - run:
          name: Bundle install
          command: bundle check || bundle install --path vendor/bundle
      - save_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          name: Verify github
          command: for ip in $(dig @8.8.8.8 github.com +short); do ssh-keyscan github.com,$ip; ssh-keyscan $ip; done 2>/dev/null >> ~/.ssh/known_hosts
      - run:
          name: Extract Staging XCConfig
          command: echo "$STAGING_XCCONFIG" | base64 --decode > firefox-ios/Client/Configuration/Staging.xcconfig
      - run:
          name: Execute bootstrap
          command: ./bootstrap.sh
      - run:
          name: Build the Ecosia app
          command: bundle exec fastlane build_ecosia_app
      - run:
          name: Upload to Firebase
          command: bundle exec fastlane upload_to_firebase
      - run:
          name: Upload to Browserstack
          command: bundle exec fastlane upload_to_browserstack
      - run: |
          printenv BROWSERSTACK_URL
      - run: |
          cp $BASH_ENV bash.env
      - persist_to_workspace:
          root: .
          paths:
            - bash.env

  execute-critical-health-checks-ios:
    docker:
      - image: cimg/openjdk:17.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Check for MARKETING_VERSION change
          command: |
            if sh ./check_marketing_version.sh; then
              echo "Version changed, proceeding with health checks"
            else
              echo "No version change detected, skipping health checks"
              circleci-agent step halt
            fi
      - run:
          name: Load Bash ENV from workspace
          command: cat bash.env >> $BASH_ENV
      - run:
          name: Confirm BrowserStack URL
          command: printenv BROWSERSTACK_URL
      - run:
          name: Confirm BROWSERSTACK_URL is available
          command: |
            source $BASH_ENV
            echo "BROWSERSTACK_URL is: $BROWSERSTACK_URL"
      - run: |
          echo "Cloning mobile acceptance tests..."
          git clone https://github.com/ecosia/mobile-acceptance-testing.git
      - run:
          name: Run iOS tests on BrowserStack (non-blocking)
          command: |
            echo "Running iOS tests on BrowserStack..."
            echo "Using App URL: $BS_URL"
            cd mobile-acceptance-testing
            mvn test -PiOSCHCTests -DBStackIOSAppUrl="$BROWSERSTACK_URL" || {
              echo "Health checks failed, but continuing with deployment..."
              exit 0
            }
      - jira/notify:
          issue_regexp: "([A-Za-z]{2,30}-[0-9]+)"
          pipeline_id: << pipeline.id >>
          pipeline_number: << pipeline.number >>

  build-testflight-deploy:
    <<: *environment_common
    <<: *macos_common
    steps:
      - checkout
      - run:
          name: Check for MARKETING_VERSION change
          command: |
            if sh ./check_marketing_version.sh; then
              echo "Version changed, proceeding with TestFlight deployment"
            else
              echo "No version change detected, skipping TestFlight deployment"
              circleci-agent step halt
            fi
      - run:
          name: Check if this is a test run
          command: |
            if [[ "$CIRCLE_BRANCH" == "dc-mob-3472-automation-tests" ]]; then
              echo "TEST MODE: Will not actually upload to TestFlight"
              echo "export TESTFLIGHT_DRY_RUN=true" >> $BASH_ENV
            else
              echo "PRODUCTION MODE: Will upload to TestFlight"
              echo "export TESTFLIGHT_DRY_RUN=false" >> $BASH_ENV
            fi
      - macos/switch-ruby:
          version: "3.2"
      - restore_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
      - run:
          name: Bundle install
          command: bundle check || bundle install --path vendor/bundle
      - save_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          name: verify github
          command: for ip in $(dig @8.8.8.8 github.com +short); do ssh-keyscan github.com,$ip; ssh-keyscan $ip; done 2>/dev/null >> ~/.ssh/known_hosts
      - run:
          name: extract Production XCConfig
          command: echo "$PRODUCTION_XCCONFIG" | base64 --decode > firefox-ios/Client/Configuration/Production.xcconfig
      - run:
          name: Execute bootstrap
          command: ./bootstrap.sh
      - run:
          name: Build and deploy to Testflight (with dry-run support)
          no_output_timeout: 35m
          command: |
            if [[ "$TESTFLIGHT_DRY_RUN" == "true" ]]; then
              echo "ðŸ§ª DRY RUN MODE: Building app but NOT uploading to TestFlight"
              echo "Would run: bundle exec fastlane testflight_live"
              echo "âœ… Test successful - workflow reached TestFlight deployment step"
            else
              echo "ðŸš€ PRODUCTION MODE: Building and uploading to TestFlight"
              bundle exec fastlane testflight_live
            fi

orbs:
  path-filtering: circleci/path-filtering@0.1.1
  macos: circleci/macos@2
  jira: circleci/jira@2.0

workflows:
  build-and-upload-to-delivery-platforms:
    jobs:
      # Always run on main branch merges
      - build-and-deploy-firebase-and-browserstack:
          name: Deploy ad-hoc version over Firebase + Upload to Browserstack
          filters:
            branches:
              only: 
                - main
                - /^main-\d+$/
                - dc-mob-3472-automation-tests  # TEMPORARY: for testing
          context: napps

      # Run health checks after deployment (will check version internally)
      - execute-critical-health-checks-ios:
          name: Critical Health Checks (version-conditional)
          requires:
            - Deploy ad-hoc version over Firebase + Upload to Browserstack
          filters:
            branches:
              only: 
                - main
                - /^main-\d+$/
                - dc-mob-3472-automation-tests  # TEMPORARY: for testing
          context: napps

      # Deploy to TestFlight after health checks
      - build-testflight-deploy:
          name: Auto Deploy release version to TestFlight
          requires:
            - Critical Health Checks (version-conditional)
          filters:
            branches:
              only: 
                - main
                - /^main-\d+$/
                - dc-mob-3472-automation-tests  # TEMPORARY: for testing
          context: napps

      - build-and-deploy-testflight-beta:
          name: Deploy beta version over Testflight
          filters:
            branches:
              only:
                - main
                - /^main-\d+$/
          when:
            or:
              - << pipeline.parameters.run-testflight-beta >>
              - matches:
                  pattern: "^beta.*"
                  value: << pipeline.git.tag >>
      
      - build-and-deploy-firebase:
          name: Deploy ad-hoc version over Firebase
          filters:
            branches:
              only: 
                - main
                - /^main-\d+$/
          when: << pipeline.parameters.run-firebase-deploy >>
          context: napps
      
      - build-and-deploy-browserstack:
          name: Upload to Browserstack
          filters:
            branches:
              only: 
                - main
                - /^main-\d+$/
          when: << pipeline.parameters.run-browserstack-tests >>
          context: napps

      # Manual release deployment trigger
      - build-testflight-deploy:
          name: Manual Deploy release version to TestFlight
          filters:
            branches:
              only:
                - main
                - /^main-\d+$/
          when: << pipeline.parameters.run-release-deploy >>
          context: napps

  test-browserstack-critical-health-checks:
    when: << pipeline.parameters.run-browserstack-tests >>
    jobs:
      - build-and-deploy-browserstack
      - execute-critical-health-checks-ios:
          requires:
            - build-and-deploy-browserstack
          context: napps
