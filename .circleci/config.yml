version: 2.1

setup: true

# Add pipeline parameters for manual triggers
parameters:
  run-browserstack-tests:
    type: boolean
    default: false
  run-firebase-deploy:
    type: boolean
    default: false
  run-testflight-beta:
    type: boolean
    default: false
  run-release-deploy:
    type: boolean
    default: false
  dry-run-mode:
    type: boolean
    default: false
    description: "Enable dry-run mode to simulate all operations without actual deployments"
  simulate-version-change:
    type: boolean
    default: false
    description: "For dry-run mode: simulate version change (true) or no change (false)"
  # Internal parameter - set when continuing to release pipeline
  is-release-pipeline:
    type: boolean
    default: false

environment_common: &environment_common
  environment:
    CI: true

macos_common: &macos_common
  macos:
    xcode: "16.2"
  resource_class: macos.m1.medium.gen1

jobs:

  check-version-bump:
    <<: *environment_common
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Check for MARKETING_VERSION change
          command: |
            VERSION_CHANGED=false
            
            if [[ "<< pipeline.parameters.dry-run-mode >>" == "true" ]]; then
              echo "üß™ DRY RUN MODE: Testing version change detection"
              if [[ "<< pipeline.parameters.simulate-version-change >>" == "true" ]]; then
                echo "‚úÖ SIMULATED: Version changed"
                VERSION_CHANGED=true
              else
                echo "‚ÑπÔ∏è  SIMULATED: No version change detected"
                VERSION_CHANGED=false
              fi
            else
              echo "üöÄ PRODUCTION MODE: Checking actual version change"
              if sh ./check_marketing_version.sh; then
                echo "‚úÖ Version changed"
                VERSION_CHANGED=true
              else
                echo "‚ÑπÔ∏è  No version change detected"
                VERSION_CHANGED=false
              fi
            fi
            
            # Save version change result to file
            echo "$VERSION_CHANGED" > /tmp/version_changed
            echo "Version change result saved: $VERSION_CHANGED"
      - run:
          name: Extract BrowserStack URL from workspace
          command: |
            # Load the bash.env from workspace to get BROWSERSTACK_URL
            source bash.env
            
            # Save BROWSERSTACK_URL to file
            echo "$BROWSERSTACK_URL" > /tmp/browserstack_url
            echo "BrowserStack URL saved: $BROWSERSTACK_URL"
      - run:
          name: Create continuation parameters
          command: |
            VERSION_CHANGED=$(cat /tmp/version_changed)
            BROWSERSTACK_URL_VALUE=$(cat /tmp/browserstack_url)
            
            if [[ "$VERSION_CHANGED" == "true" ]]; then
              echo "Creating continuation parameters with BrowserStack URL: $BROWSERSTACK_URL_VALUE"
              
              # Create parameters file for continuation
              echo "{\"is-release-pipeline\": true, \"browserstack-url\": \"$BROWSERSTACK_URL_VALUE\"}" > /tmp/continuation_params.json
              
              echo "Continuation parameters created"
            else
              echo "No version change - skipping parameter creation"
            fi
      - when:
          condition:
            or:
              - and:
                - << pipeline.parameters.dry-run-mode >>
                - << pipeline.parameters.simulate-version-change >>
              - and:
                - not: << pipeline.parameters.dry-run-mode >>
          steps:
            - continuation/continue:
                configuration_path: .circleci/release-config.yml
                parameters: /tmp/continuation_params.json
      - run:
          name: Pipeline complete
          command: |
            VERSION_CHANGED=$(cat /tmp/version_changed)
            if [[ "$VERSION_CHANGED" == "true" ]]; then
              echo "üöÄ Release pipeline triggered for version change"
            else
              echo "‚ÑπÔ∏è  No version change - pipeline complete"
            fi

  build-and-deploy-testflight-beta:
    <<: *environment_common
    <<: *macos_common
    steps:
      - checkout
      - macos/switch-ruby:
          version: "3.2"
      - restore_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
      - run:
          name: Bundle install
          command: bundle check || bundle install --path vendor/bundle
      - save_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          name: Verify github
          command: for ip in $(dig @8.8.8.8 github.com +short); do ssh-keyscan github.com,$ip; ssh-keyscan $ip; done 2>/dev/null >> ~/.ssh/known_hosts
      - run:
          name: extract Staging XCConfig
          command: echo "$STAGING_XCCONFIG" | base64 --decode > firefox-ios/Client/Configuration/Staging.xcconfig
      - run:
          name: Execute bootstrap
          command: ./bootstrap.sh
      - run:
          name: Build and deploy to Testflight
          command: bundle exec fastlane testflight_beta

  build-and-deploy-firebase-and-browserstack:
    <<: *environment_common
    <<: *macos_common
    steps:
      - checkout
      - run:
          name: Check if this is a dry-run
          command: |
            if [[ "<< pipeline.parameters.dry-run-mode >>" == "true" ]]; then
              echo "üß™ DRY RUN MODE: Will simulate deployments without actual uploads"
              echo "export DEPLOYMENT_DRY_RUN=true" >> $BASH_ENV
            else
              echo "üöÄ PRODUCTION MODE: Will perform actual deployments"
              echo "export DEPLOYMENT_DRY_RUN=false" >> $BASH_ENV
            fi
      - macos/switch-ruby:
          version: "3.2"
      - restore_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
      - run:
          name: Bundle install
          command: bundle check || bundle install --path vendor/bundle
      - save_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          name: Verify github
          command: for ip in $(dig @8.8.8.8 github.com +short); do ssh-keyscan github.com,$ip; ssh-keyscan $ip; done 2>/dev/null >> ~/.ssh/known_hosts
      - run:
          name: Extract Staging XCConfig
          command: echo "$STAGING_XCCONFIG" | base64 --decode > firefox-ios/Client/Configuration/Staging.xcconfig
      - run:
          name: Execute bootstrap
          command: ./bootstrap.sh
      - run:
          name: Build the Ecosia app (with dry-run support)
          command: |
            if [[ "$DEPLOYMENT_DRY_RUN" == "true" ]]; then
              echo "üß™ DRY RUN: Simulating app build"
              echo "Would run: bundle exec fastlane build_ecosia_app"
            else
              echo "üöÄ PRODUCTION: Building Ecosia app"
              bundle exec fastlane build_ecosia_app
            fi
      - run:
          name: Upload to Firebase (with dry-run support)
          command: |
            if [[ "$DEPLOYMENT_DRY_RUN" == "true" ]]; then
              echo "üß™ DRY RUN: Simulating Firebase upload"
              echo "Would run: bundle exec fastlane upload_to_firebase"
            else
              echo "üöÄ PRODUCTION: Uploading to Firebase"
              bundle exec fastlane upload_to_firebase
            fi
      - run:
          name: Upload to Browserstack (with dry-run support)
          command: |
            if [[ "$DEPLOYMENT_DRY_RUN" == "true" ]]; then
              echo "üß™ DRY RUN: Simulating BrowserStack upload"
              echo "Would run: bundle exec fastlane upload_to_browserstack"
              # Simulate the BrowserStack URL for downstream jobs
              echo "export BROWSERSTACK_URL=https://fake-browserstack-url-for-testing.com" >> $BASH_ENV
            else
              echo "üöÄ PRODUCTION: Uploading to BrowserStack"
              bundle exec fastlane upload_to_browserstack
            fi
      - run: |
          printenv BROWSERSTACK_URL
      - run: |
          cp $BASH_ENV bash.env
      - persist_to_workspace:
          root: .
          paths:
            - bash.env

  build-and-deploy-firebase:
    <<: *environment_common
    <<: *macos_common
    steps:
      - checkout
      - run:
          name: Check if this is a dry-run
          command: |
            if [[ "<< pipeline.parameters.dry-run-mode >>" == "true" ]]; then
              echo "üß™ DRY RUN MODE: Will simulate Firebase deployment"
              echo "export DEPLOYMENT_DRY_RUN=true" >> $BASH_ENV
            else
              echo "üöÄ PRODUCTION MODE: Will perform actual Firebase deployment"
              echo "export DEPLOYMENT_DRY_RUN=false" >> $BASH_ENV
            fi
      - macos/switch-ruby:
          version: "3.2"
      - restore_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
      - run:
          name: Bundle install
          command: bundle check || bundle install --path vendor/bundle
      - save_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          name: Verify github
          command: for ip in $(dig @8.8.8.8 github.com +short); do ssh-keyscan github.com,$ip; ssh-keyscan $ip; done 2>/dev/null >> ~/.ssh/known_hosts
      - run:
          name: Extract Staging XCConfig
          command: echo "$STAGING_XCCONFIG" | base64 --decode > firefox-ios/Client/Configuration/Staging.xcconfig
      - run:
          name: Execute bootstrap
          command: ./bootstrap.sh
      - run:
          name: Build the Ecosia app (with dry-run support)
          command: |
            if [[ "$DEPLOYMENT_DRY_RUN" == "true" ]]; then
              echo "üß™ DRY RUN: Simulating app build"
              echo "Would run: bundle exec fastlane build_ecosia_app"
            else
              echo "üöÄ PRODUCTION: Building Ecosia app"
              bundle exec fastlane build_ecosia_app
            fi
      - run:
          name: Upload to Firebase (with dry-run support)
          command: |
            if [[ "$DEPLOYMENT_DRY_RUN" == "true" ]]; then
              echo "üß™ DRY RUN: Simulating Firebase upload"
              echo "Would run: bundle exec fastlane upload_to_firebase"
            else
              echo "üöÄ PRODUCTION: Uploading to Firebase"
              bundle exec fastlane upload_to_firebase
            fi

  build-and-deploy-browserstack:
    <<: *environment_common
    <<: *macos_common
    steps:
      - checkout
      - run:
          name: Check if this is a dry-run
          command: |
            if [[ "<< pipeline.parameters.dry-run-mode >>" == "true" ]]; then
              echo "üß™ DRY RUN MODE: Will simulate BrowserStack deployment"
              echo "export DEPLOYMENT_DRY_RUN=true" >> $BASH_ENV
            else
              echo "üöÄ PRODUCTION MODE: Will perform actual BrowserStack deployment"
              echo "export DEPLOYMENT_DRY_RUN=false" >> $BASH_ENV
            fi
      - macos/switch-ruby:
          version: "3.2"
      - restore_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
      - run:
          name: Bundle install
          command: bundle check || bundle install --path vendor/bundle
      - save_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          name: Verify github
          command: for ip in $(dig @8.8.8.8 github.com +short); do ssh-keyscan github.com,$ip; ssh-keyscan $ip; done 2>/dev/null >> ~/.ssh/known_hosts
      - run:
          name: Extract Staging XCConfig
          command: echo "$STAGING_XCCONFIG" | base64 --decode > firefox-ios/Client/Configuration/Staging.xcconfig
      - run:
          name: Execute bootstrap
          command: ./bootstrap.sh
      - run:
          name: Build the Ecosia app (with dry-run support)
          command: |
            if [[ "$DEPLOYMENT_DRY_RUN" == "true" ]]; then
              echo "üß™ DRY RUN: Simulating app build"
              echo "Would run: bundle exec fastlane build_ecosia_app"
            else
              echo "üöÄ PRODUCTION: Building Ecosia app"
              bundle exec fastlane build_ecosia_app
            fi
      - run:
          name: Upload to Browserstack (with dry-run support)
          command: |
            if [[ "$DEPLOYMENT_DRY_RUN" == "true" ]]; then
              echo "üß™ DRY RUN: Simulating BrowserStack upload"
              echo "Would run: bundle exec fastlane upload_to_browserstack"
              # Simulate the BrowserStack URL for downstream jobs
              echo "export BROWSERSTACK_URL=https://fake-browserstack-url-for-testing.com" >> $BASH_ENV
            else
              echo "üöÄ PRODUCTION: Uploading to BrowserStack"
              bundle exec fastlane upload_to_browserstack
            fi
      - run: |
          printenv BROWSERSTACK_URL
      - run: |
          cp $BASH_ENV bash.env
      - persist_to_workspace:
          root: .
          paths:
            - bash.env

orbs:
  path-filtering: circleci/path-filtering@0.1.1
  macos: circleci/macos@2
  jira: circleci/jira@2.0
  continuation: circleci/continuation@1.0.0

workflows:
  # Setup workflow - runs on main branch merges or manual triggers
  setup-workflow:
    unless: << pipeline.parameters.is-release-pipeline >>
    jobs:
      # Always run on main branch merges
      - build-and-deploy-firebase-and-browserstack:
          name: Deploy ad-hoc version over Firebase + Upload to Browserstack
          filters:
            branches:
              only: 
                - main
                - /^main-\d+$/
                - dc-ai-shortcut-mvp
          context: napps

      # Check if version was bumped and conditionally continue to release pipeline
      - check-version-bump:
          name: Check for version bump
          requires:
            - Deploy ad-hoc version over Firebase + Upload to Browserstack
          filters:
            branches:
              only: 
                - main
                - /^main-\d+$/
          context: napps

  # Beta deployment triggered by tags
  beta-deployment:
    unless: << pipeline.parameters.is-release-pipeline >>
    jobs:
      - build-and-deploy-testflight-beta:
          name: Deploy beta version over Testflight (tags)
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^beta.*/
          context: napps

  # Manual triggers as separate workflows
  manual-testflight-beta:
    when: 
      and:
        - << pipeline.parameters.run-testflight-beta >>
        - not: << pipeline.parameters.is-release-pipeline >>
    jobs:
      - build-and-deploy-testflight-beta:
          name: Manual Deploy beta version over Testflight
          context: napps

  manual-firebase-deploy:
    when: 
      and:
        - << pipeline.parameters.run-firebase-deploy >>
        - not: << pipeline.parameters.is-release-pipeline >>
    jobs:
      - build-and-deploy-firebase:
          name: Manual Deploy ad-hoc version over Firebase
          context: napps

  manual-browserstack-tests:
    when: 
      and:
        - << pipeline.parameters.run-browserstack-tests >>
        - not: << pipeline.parameters.is-release-pipeline >>
    jobs:
      - build-and-deploy-browserstack:
          name: Manual Upload to Browserstack
          context: napps

  manual-release-deploy:
    when: 
      and:
        - << pipeline.parameters.run-release-deploy >>
        - not: << pipeline.parameters.is-release-pipeline >>
    jobs:
      - build-testflight-deploy:
          name: Manual Deploy release version to TestFlight
          context: napps

  # Manual full workflow for testing
  manual-full-workflow:
    when: 
      and:
        - << pipeline.parameters.dry-run-mode >>
        - not: << pipeline.parameters.is-release-pipeline >>
    jobs:
      # Always run deployment
      - build-and-deploy-firebase-and-browserstack:
          name: Manual Deploy ad-hoc version over Firebase + Upload to Browserstack
          context: napps

      # Check if version was bumped and conditionally continue to release pipeline
      - check-version-bump:
          name: Manual Check for version bump
          requires:
            - Manual Deploy ad-hoc version over Firebase + Upload to Browserstack
          context: napps
