version: 2.1

setup: true

# Add pipeline parameters for manual triggers
parameters:
  run-browserstack-tests:
    type: boolean
    default: false
  run-firebase-deploy:
    type: boolean
    default: false
  run-testflight-beta:
    type: boolean
    default: false
  run-release-deploy:
    type: boolean
    default: false
  dry-run-mode:
    type: boolean
    default: false
    description: "Enable dry-run mode to simulate all operations without actual deployments"
  simulate-version-change:
    type: boolean
    default: false
    description: "For dry-run mode: simulate version change (true) or no change (false)"

environment_common: &environment_common
  environment:
    CI: true

macos_common: &macos_common
  macos:
    xcode: "16.2"
  resource_class: macos.m1.medium.gen1

jobs:

  check-version-bump:
    <<: *environment_common
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Check for MARKETING_VERSION change and save result
          command: |
            VERSION_CHANGED=false
            
            if [[ "<< pipeline.parameters.dry-run-mode >>" == "true" ]]; then
              echo "üß™ DRY RUN MODE: Testing version change detection"
              if [[ "<< pipeline.parameters.simulate-version-change >>" == "true" ]]; then
                echo "‚úÖ SIMULATED: Version changed"
                VERSION_CHANGED=true
              else
                echo "‚ÑπÔ∏è  SIMULATED: No version change detected"
                VERSION_CHANGED=false
              fi
            else
              echo "üöÄ PRODUCTION MODE: Checking actual version change"
              if sh ./check_marketing_version.sh; then
                echo "‚úÖ Version changed"
                VERSION_CHANGED=true
              else
                echo "‚ÑπÔ∏è  No version change detected"
                VERSION_CHANGED=false
              fi
            fi
            
            # Save result to workspace for other jobs to read
            mkdir -p /tmp/version-check
            echo "$VERSION_CHANGED" > /tmp/version-check/version_changed
            
            if [[ "$VERSION_CHANGED" == "true" ]]; then
              echo "üöÄ Version changed - release pipeline will be triggered"
            else
              echo "‚ÑπÔ∏è  No version change - release pipeline will be skipped"
            fi
      - persist_to_workspace:
          root: /tmp/version-check
          paths:
            - version_changed

  build-and-deploy-testflight-beta:
    <<: *environment_common
    <<: *macos_common
    steps:
      - checkout
      - macos/switch-ruby:
          version: "3.2"
      - restore_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
      - run:
          name: Bundle install
          command: bundle check || bundle install --path vendor/bundle
      - save_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          name: Verify github
          command: for ip in $(dig @8.8.8.8 github.com +short); do ssh-keyscan github.com,$ip; ssh-keyscan $ip; done 2>/dev/null >> ~/.ssh/known_hosts
      - run:
          name: extract Staging XCConfig
          command: echo "$STAGING_XCCONFIG" | base64 --decode > firefox-ios/Client/Configuration/Staging.xcconfig
      - run:
          name: Execute bootstrap
          command: ./bootstrap.sh
      - run:
          name: Build and deploy to Testflight
          command: bundle exec fastlane testflight_beta

  build-and-deploy-firebase-and-browserstack:
    <<: *environment_common
    <<: *macos_common
    steps:
      - checkout
      - run:
          name: Check if this is a dry-run
          command: |
            if [[ "<< pipeline.parameters.dry-run-mode >>" == "true" ]]; then
              echo "üß™ DRY RUN MODE: Will simulate deployments without actual uploads"
              echo "export DEPLOYMENT_DRY_RUN=true" >> $BASH_ENV
            else
              echo "üöÄ PRODUCTION MODE: Will perform actual deployments"
              echo "export DEPLOYMENT_DRY_RUN=false" >> $BASH_ENV
            fi
      - macos/switch-ruby:
          version: "3.2"
      - restore_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
      - run:
          name: Bundle install
          command: bundle check || bundle install --path vendor/bundle
      - save_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          name: Verify github
          command: for ip in $(dig @8.8.8.8 github.com +short); do ssh-keyscan github.com,$ip; ssh-keyscan $ip; done 2>/dev/null >> ~/.ssh/known_hosts
      - run:
          name: Extract Staging XCConfig
          command: echo "$STAGING_XCCONFIG" | base64 --decode > firefox-ios/Client/Configuration/Staging.xcconfig
      - run:
          name: Execute bootstrap
          command: ./bootstrap.sh
      - run:
          name: Build the Ecosia app (with dry-run support)
          command: |
            if [[ "$DEPLOYMENT_DRY_RUN" == "true" ]]; then
              echo "üß™ DRY RUN: Simulating app build"
              echo "Would run: bundle exec fastlane build_ecosia_app"
            else
              echo "üöÄ PRODUCTION: Building Ecosia app"
              bundle exec fastlane build_ecosia_app
            fi
      - run:
          name: Upload to Firebase (with dry-run support)
          command: |
            if [[ "$DEPLOYMENT_DRY_RUN" == "true" ]]; then
              echo "üß™ DRY RUN: Simulating Firebase upload"
              echo "Would run: bundle exec fastlane upload_to_firebase"
            else
              echo "üöÄ PRODUCTION: Uploading to Firebase"
              bundle exec fastlane upload_to_firebase
            fi
      - run:
          name: Upload to Browserstack (with dry-run support)
          command: |
            if [[ "$DEPLOYMENT_DRY_RUN" == "true" ]]; then
              echo "üß™ DRY RUN: Simulating BrowserStack upload"
              echo "Would run: bundle exec fastlane upload_to_browserstack"
              # Simulate the BrowserStack URL for downstream jobs
              echo "export BROWSERSTACK_URL=https://fake-browserstack-url-for-testing.com" >> $BASH_ENV
            else
              echo "üöÄ PRODUCTION: Uploading to BrowserStack"
              bundle exec fastlane upload_to_browserstack
            fi
      - run: |
          printenv BROWSERSTACK_URL
      - run: |
          cp $BASH_ENV bash.env
      - persist_to_workspace:
          root: .
          paths:
            - bash.env

  execute-critical-health-checks-ios:
    docker:
      - image: cimg/openjdk:17.0
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/version-check
      - attach_workspace:
          at: .
      - run:
          name: Check if this is a dry-run
          command: |
            if [[ "<< pipeline.parameters.dry-run-mode >>" == "true" ]]; then
              echo "üß™ DRY RUN MODE: Will simulate health checks without actual execution"
              echo "export HEALTH_CHECKS_DRY_RUN=true" >> $BASH_ENV
            else
              echo "üöÄ PRODUCTION MODE: Will run actual health checks"
              echo "export HEALTH_CHECKS_DRY_RUN=false" >> $BASH_ENV
            fi
      - run:
          name: Load Bash ENV from workspace
          command: |
            if [[ -f "/tmp/version-check/version_changed" ]] && [[ "$(cat /tmp/version-check/version_changed)" == "true" ]]; then
              echo "‚úÖ Version changed detected - proceeding with health checks"
              cat bash.env >> $BASH_ENV
            else
              echo "‚ÑπÔ∏è  No version change - skipping health checks"
              exit 0
            fi
      - run:
          name: Confirm BrowserStack URL
          command: |
            if [[ -f "/tmp/version-check/version_changed" ]] && [[ "$(cat /tmp/version-check/version_changed)" == "true" ]]; then
              printenv BROWSERSTACK_URL
            else
              echo "Skipping - no version change detected"
              exit 0
            fi
      - run:
          name: Confirm BROWSERSTACK_URL is available
          command: |
            if [[ -f "/tmp/version-check/version_changed" ]] && [[ "$(cat /tmp/version-check/version_changed)" == "true" ]]; then
              source $BASH_ENV
              echo "BROWSERSTACK_URL is: $BROWSERSTACK_URL"
            else
              echo "Skipping - no version change detected"
              exit 0
            fi
      - run:
          name: Clone mobile acceptance tests (with dry-run support)
          command: |
            if [[ -f "/tmp/version-check/version_changed" ]] && [[ "$(cat /tmp/version-check/version_changed)" == "true" ]]; then
              if [[ "$HEALTH_CHECKS_DRY_RUN" == "true" ]]; then
                echo "üß™ DRY RUN: Simulating test repository clone"
                echo "Would run: git clone https://github.com/ecosia/mobile-acceptance-testing.git"
              else
                echo "üöÄ PRODUCTION: Cloning mobile acceptance tests"
                git clone https://github.com/ecosia/mobile-acceptance-testing.git
              fi
            else
              echo "Skipping - no version change detected"
              exit 0
            fi
      - run:
          name: Run iOS tests on BrowserStack (with dry-run support)
          command: |
            if [[ -f "/tmp/version-check/version_changed" ]] && [[ "$(cat /tmp/version-check/version_changed)" == "true" ]]; then
              if [[ "$HEALTH_CHECKS_DRY_RUN" == "true" ]]; then
                echo "üß™ DRY RUN: Simulating iOS health checks on BrowserStack"
                echo "Would run: mvn test -PiOSCHCTests -DBStackIOSAppUrl=$BROWSERSTACK_URL"
                echo "‚úÖ SIMULATED: Health checks completed successfully"
              else
                echo "üöÄ PRODUCTION: Running iOS tests on BrowserStack"
                echo "Using App URL: $BS_URL"
                cd mobile-acceptance-testing
                mvn test -PiOSCHCTests -DBStackIOSAppUrl="$BROWSERSTACK_URL" || {
                  echo "Health checks failed, but continuing with deployment..."
                  exit 0
                }
              fi
            else
              echo "Skipping - no version change detected"
              exit 0
            fi
      - jira/notify:
          issue_regexp: "([A-Za-z]{2,30}-[0-9]+)"
          pipeline_id: << pipeline.id >>
          pipeline_number: << pipeline.number >>

  build-testflight-deploy:
    <<: *environment_common
    <<: *macos_common
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/version-check
      - run:
          name: Check if this is a dry-run
          command: |
            if [[ "<< pipeline.parameters.dry-run-mode >>" == "true" ]]; then
              echo "üß™ DRY RUN MODE: Will not actually upload to TestFlight"
              echo "export TESTFLIGHT_DRY_RUN=true" >> $BASH_ENV
            else
              echo "üöÄ PRODUCTION MODE: Will upload to TestFlight"
              echo "export TESTFLIGHT_DRY_RUN=false" >> $BASH_ENV
            fi
      - macos/switch-ruby:
          version: "3.2"
      - restore_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
      - run:
          name: Bundle install
          command: |
            if [[ -f "/tmp/version-check/version_changed" ]] && [[ "$(cat /tmp/version-check/version_changed)" == "true" ]]; then
              bundle check || bundle install --path vendor/bundle
            else
              echo "Skipping - no version change detected"
              exit 0
            fi
      - save_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          name: verify github
          command: |
            if [[ -f "/tmp/version-check/version_changed" ]] && [[ "$(cat /tmp/version-check/version_changed)" == "true" ]]; then
              for ip in $(dig @8.8.8.8 github.com +short); do ssh-keyscan github.com,$ip; ssh-keyscan $ip; done 2>/dev/null >> ~/.ssh/known_hosts
            else
              echo "Skipping - no version change detected"
              exit 0
            fi
      - run:
          name: extract Production XCConfig
          command: |
            if [[ -f "/tmp/version-check/version_changed" ]] && [[ "$(cat /tmp/version-check/version_changed)" == "true" ]]; then
              echo "$PRODUCTION_XCCONFIG" | base64 --decode > firefox-ios/Client/Configuration/Production.xcconfig
            else
              echo "Skipping - no version change detected"
              exit 0
            fi
      - run:
          name: Execute bootstrap
          command: |
            if [[ -f "/tmp/version-check/version_changed" ]] && [[ "$(cat /tmp/version-check/version_changed)" == "true" ]]; then
              ./bootstrap.sh
            else
              echo "Skipping - no version change detected"
              exit 0
            fi
      - run:
          name: Build and deploy to Testflight (with dry-run support)
          no_output_timeout: 35m
          command: |
            if [[ -f "/tmp/version-check/version_changed" ]] && [[ "$(cat /tmp/version-check/version_changed)" == "true" ]]; then
              if [[ "$TESTFLIGHT_DRY_RUN" == "true" ]]; then
                echo "üß™ DRY RUN MODE: Building app but NOT uploading to TestFlight"
                echo "Would run: bundle exec fastlane testflight_live"
                echo "‚úÖ Test successful - workflow reached TestFlight deployment step"
              else
                echo "üöÄ PRODUCTION MODE: Building and uploading to TestFlight"
                bundle exec fastlane testflight_live
              fi
            else
              echo "Skipping - no version change detected"
              exit 0
            fi

  build-and-deploy-firebase:
    <<: *environment_common
    <<: *macos_common
    steps:
      - checkout
      - run:
          name: Check if this is a dry-run
          command: |
            if [[ "<< pipeline.parameters.dry-run-mode >>" == "true" ]]; then
              echo "üß™ DRY RUN MODE: Will simulate Firebase deployment"
              echo "export DEPLOYMENT_DRY_RUN=true" >> $BASH_ENV
            else
              echo "üöÄ PRODUCTION MODE: Will perform actual Firebase deployment"
              echo "export DEPLOYMENT_DRY_RUN=false" >> $BASH_ENV
            fi
      - macos/switch-ruby:
          version: "3.2"
      - restore_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
      - run:
          name: Bundle install
          command: bundle check || bundle install --path vendor/bundle
      - save_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          name: Verify github
          command: for ip in $(dig @8.8.8.8 github.com +short); do ssh-keyscan github.com,$ip; ssh-keyscan $ip; done 2>/dev/null >> ~/.ssh/known_hosts
      - run:
          name: Extract Staging XCConfig
          command: echo "$STAGING_XCCONFIG" | base64 --decode > firefox-ios/Client/Configuration/Staging.xcconfig
      - run:
          name: Execute bootstrap
          command: ./bootstrap.sh
      - run:
          name: Build the Ecosia app (with dry-run support)
          command: |
            if [[ "$DEPLOYMENT_DRY_RUN" == "true" ]]; then
              echo "üß™ DRY RUN: Simulating app build"
              echo "Would run: bundle exec fastlane build_ecosia_app"
            else
              echo "üöÄ PRODUCTION: Building Ecosia app"
              bundle exec fastlane build_ecosia_app
            fi
      - run:
          name: Upload to Firebase (with dry-run support)
          command: |
            if [[ "$DEPLOYMENT_DRY_RUN" == "true" ]]; then
              echo "üß™ DRY RUN: Simulating Firebase upload"
              echo "Would run: bundle exec fastlane upload_to_firebase"
            else
              echo "üöÄ PRODUCTION: Uploading to Firebase"
              bundle exec fastlane upload_to_firebase
            fi

  build-and-deploy-browserstack:
    <<: *environment_common
    <<: *macos_common
    steps:
      - checkout
      - run:
          name: Check if this is a dry-run
          command: |
            if [[ "<< pipeline.parameters.dry-run-mode >>" == "true" ]]; then
              echo "üß™ DRY RUN MODE: Will simulate BrowserStack deployment"
              echo "export DEPLOYMENT_DRY_RUN=true" >> $BASH_ENV
            else
              echo "üöÄ PRODUCTION MODE: Will perform actual BrowserStack deployment"
              echo "export DEPLOYMENT_DRY_RUN=false" >> $BASH_ENV
            fi
      - macos/switch-ruby:
          version: "3.2"
      - restore_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
      - run:
          name: Bundle install
          command: bundle check || bundle install --path vendor/bundle
      - save_cache:
          key: 1-gems-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          name: Verify github
          command: for ip in $(dig @8.8.8.8 github.com +short); do ssh-keyscan github.com,$ip; ssh-keyscan $ip; done 2>/dev/null >> ~/.ssh/known_hosts
      - run:
          name: Extract Staging XCConfig
          command: echo "$STAGING_XCCONFIG" | base64 --decode > firefox-ios/Client/Configuration/Staging.xcconfig
      - run:
          name: Execute bootstrap
          command: ./bootstrap.sh
      - run:
          name: Build the Ecosia app (with dry-run support)
          command: |
            if [[ "$DEPLOYMENT_DRY_RUN" == "true" ]]; then
              echo "üß™ DRY RUN: Simulating app build"
              echo "Would run: bundle exec fastlane build_ecosia_app"
            else
              echo "üöÄ PRODUCTION: Building Ecosia app"
              bundle exec fastlane build_ecosia_app
            fi
      - run:
          name: Upload to Browserstack (with dry-run support)
          command: |
            if [[ "$DEPLOYMENT_DRY_RUN" == "true" ]]; then
              echo "üß™ DRY RUN: Simulating BrowserStack upload"
              echo "Would run: bundle exec fastlane upload_to_browserstack"
              # Simulate the BrowserStack URL for downstream jobs
              echo "export BROWSERSTACK_URL=https://fake-browserstack-url-for-testing.com" >> $BASH_ENV
            else
              echo "üöÄ PRODUCTION: Uploading to BrowserStack"
              bundle exec fastlane upload_to_browserstack
            fi
      - run: |
          printenv BROWSERSTACK_URL
      - run: |
          cp $BASH_ENV bash.env
      - persist_to_workspace:
          root: .
          paths:
            - bash.env

orbs:
  path-filtering: circleci/path-filtering@0.1.1
  macos: circleci/macos@2
  jira: circleci/jira@2.0

workflows:
  # Main workflow - all jobs run but conditionally execute based on version check
  build-and-upload-to-delivery-platforms-with-health-checks:
    jobs:
      # Always run on main branch merges
      - build-and-deploy-firebase-and-browserstack:
          name: Deploy ad-hoc version over Firebase + Upload to Browserstack
          filters:
            branches:
              only: 
                - main
                - /^main-\d+$/
          context: napps

      # Check if version was bumped and save result to workspace
      - check-version-bump:
          name: Check for version bump
          requires:
            - Deploy ad-hoc version over Firebase + Upload to Browserstack
          filters:
            branches:
              only: 
                - main
                - /^main-\d+$/
          context: napps

      # Run health checks (conditionally based on version check result)
      - execute-critical-health-checks-ios:
          name: Critical Health Checks (release cut pipeline)
          requires:
            - Check for version bump
          filters:
            branches:
              only: 
                - main
                - /^main-\d+$/
          context: napps

      # Deploy to TestFlight (conditionally based on version check result)
      - build-testflight-deploy:
          name: Auto Deploy release version to TestFlight
          requires:
            - Critical Health Checks (release cut pipeline)
          filters:
            branches:
              only: 
                - main
                - /^main-\d+$/
          context: napps

  # Beta deployment triggered by tags
  beta-deployment:
    jobs:
      - build-and-deploy-testflight-beta:
          name: Deploy beta version over Testflight (tags)
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^beta.*/
          context: napps

  # Manual triggers as separate workflows
  manual-testflight-beta:
    when: << pipeline.parameters.run-testflight-beta >>
    jobs:
      - build-and-deploy-testflight-beta:
          name: Manual Deploy beta version over Testflight
          context: napps

  manual-firebase-deploy:
    when: << pipeline.parameters.run-firebase-deploy >>
    jobs:
      - build-and-deploy-firebase:
          name: Manual Deploy ad-hoc version over Firebase
          context: napps

  manual-browserstack-tests:
    when: << pipeline.parameters.run-browserstack-tests >>
    jobs:
      - build-and-deploy-browserstack:
          name: Manual Upload to Browserstack
          context: napps
      - execute-critical-health-checks-ios:
          requires:
            - Manual Upload to Browserstack
          context: napps

  manual-release-deploy:
    when: << pipeline.parameters.run-release-deploy >>
    jobs:
      - build-testflight-deploy:
          name: Manual Deploy release version to TestFlight
          context: napps

  # Manual full workflow for testing
  manual-full-workflow:
    when: << pipeline.parameters.dry-run-mode >>
    jobs:
      # Always run deployment
      - build-and-deploy-firebase-and-browserstack:
          name: Manual Deploy ad-hoc version over Firebase + Upload to Browserstack
          context: napps

      # Check if version was bumped and save result to workspace
      - check-version-bump:
          name: Manual Check for version bump
          requires:
            - Manual Deploy ad-hoc version over Firebase + Upload to Browserstack
          context: napps

      # Run health checks (conditionally based on version check result)
      - execute-critical-health-checks-ios:
          name: Manual Critical Health Checks (release cut pipeline)
          requires:
            - Manual Check for version bump
          context: napps

      # Deploy to TestFlight (conditionally based on version check result)
      - build-testflight-deploy:
          name: Manual Auto Deploy release version to TestFlight
          requires:
            - Manual Critical Health Checks (release cut pipeline)
          context: napps


