name: 'Perform Unit Tests'
description: 'This action contains all the usual steps needed to perform the unit tests'

inputs:
  github-token:
    description: 'The Github Token'
    required: true

runs:
  using: "composite"
  steps:
        
    - name: Run tests directly with xcodebuild
      shell: bash
      run: |
        # Set environment variables to suppress warnings and errors during compilation
        export OTHER_SWIFT_FLAGS="-suppress-warnings"
        export SWIFT_TREAT_WARNINGS_AS_ERRORS=NO
        export SWIFT_STRICT_CONCURRENCY=minimal
        
        # Use xcodebuild directly since it works locally
        xcodebuild -scheme Ecosia \
          -project firefox-ios/Client.xcodeproj \
          -configuration Testing \
          -destination "platform=iOS Simulator,name=iPhone 16" \
          -testPlan UnitTest \
          -skip-testing:ClientTests \
          -skip-testing:EcosiaTests/BrazeServiceTests \
          -derivedDataPath DerivedData \
          -resultBundlePath TestResults.xcresult \
          clean test

    - name: Convert Xcode results to JUnit format
      shell: bash
      if: always()
      run: |
        # Install xcresult tool if needed
        if ! command -v xcresulttool &> /dev/null; then
          brew install xcbeautify
        fi
        
        # Create output directory
        mkdir -p test_output/xml
        
        # Convert xcresult to junit format
        xcrun xcresulttool get --format json --path TestResults.xcresult > TestResults.json
        python3 -c '
import json
import sys
import os
from xml.etree.ElementTree import Element, SubElement, tostring
from xml.dom import minidom

def prettify(elem):
    rough_string = tostring(elem, "utf-8")
    reparsed = minidom.parseString(rough_string)
    return reparsed.toprettyxml(indent="  ")

with open("TestResults.json") as f:
    data = json.load(f)

# Create root element
testsuite = Element("testsuite")
testsuite.set("name", "XcodebuildTests")

# Extract test results
actions = data.get("actions", {}).get("_values", [])
for action in actions:
    if action.get("actionResult", {}).get("testsRef", {}).get("id", {}).get("_value"):
        test_ref = action.get("actionResult", {}).get("testsRef", {}).get("id", {}).get("_value")
        # Get test results
        os.system(f"xcrun xcresulttool get --format json --path TestResults.xcresult --id {test_ref} > TestDetails.json")
        with open("TestDetails.json") as f:
            test_data = json.load(f)
        
        summaries = test_data.get("summaries", {}).get("_values", [])
        for summary in summaries:
            testableSummaries = summary.get("testableSummaries", {}).get("_values", [])
            for testable in testableSummaries:
                tests = testable.get("tests", {}).get("_values", [])
                for test_suite in tests:
                    for test_class in test_suite.get("subtests", {}).get("_values", []):
                        for test in test_class.get("subtests", {}).get("_values", []):
                            testcase = SubElement(testsuite, "testcase")
                            testcase.set("classname", test_class.get("name", {}).get("_value", "Unknown"))
                            testcase.set("name", test.get("name", {}).get("_value", "Unknown"))
                            
                            # Check if test failed
                            if test.get("testStatus", {}).get("_value") != "Success":
                                failure = SubElement(testcase, "failure")
                                failure.set("message", "Test failed")
                                failure.text = str(test)

with open("test_output/xml/report.junit", "w") as f:
    f.write(prettify(testsuite))
        '
        
    - name: Publish Test Report
      if: always()
      uses: mikepenz/action-junit-report@v3.7.6
      with:
        report_paths: '**/test_output/xml/report.junit'
        github_token: ${{ inputs.github-token }}