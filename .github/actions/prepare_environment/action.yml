name: 'Prepare environment'
description: 'This action contains all the usual steps needed to setup the environment and restore caches when available'

inputs:
  core-token:
    description: 'The iOS core token'
    required: true

runs:
  using: "composite"
  steps:

    - name: Xcode Select Version
      uses: mobiledevops/xcode-select-version-action@v1
      with:
        xcode-select-version: 16.4
        
    - name: Check Xcode and Swift Version
      shell: bash
      run: |
        echo "Checking Xcode and Swift version"
        xcodebuild -version
        swift --version
        
    - name: Fix SwiftBridging Module Redefinition
      shell: bash
      run: |
        echo "Checking for duplicate SwiftBridging module"
        BRIDGING_MODULEMAP="/Applications/Xcode_16.4.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include/swift/bridging.modulemap"
        if [ -f "$BRIDGING_MODULEMAP" ]; then
          echo "Backing up and fixing bridging.modulemap"
          sudo cp "$BRIDGING_MODULEMAP" "${BRIDGING_MODULEMAP}.bak"
          # Comment out the SwiftBridging module definition to prevent redefinition
          sudo sed -i.tmp 's/^module SwiftBridging {/\/\* module SwiftBridging {/g' "$BRIDGING_MODULEMAP"
          sudo sed -i.tmp 's/^}/} \*\//g' "$BRIDGING_MODULEMAP"
          cat "$BRIDGING_MODULEMAP"
        else
          echo "bridging.modulemap not found at expected location"
        fi
        
    - name: List Available Simulator Runtimes Before Download
      shell: bash
      run: |
        echo "Available simulator runtimes before download:"
        xcrun simctl list runtimes
        
    - name: Download iOS 18.6 Platform
      shell: bash
      run: |
        echo "Downloading iOS 18.6 platform..."
        # Use perl to implement a timeout since 'timeout' command isn't available on macOS
        perl -e '
          eval {
            local $SIG{ALRM} = sub { die "timeout\n" };
            alarm 3600;
            system("xcodebuild -downloadPlatform iOS -buildVersion 18.6");
            alarm 0;
          };
          if ($@ eq "timeout\n") {
            print "Error: Download timed out after 3600 seconds\n";
            exit 1;
          }
          exit $? >> 8;
        '
        
    - name: List Available Simulator Runtimes After Download
      shell: bash
      run: |
        echo "Available simulator runtimes after download:"
        xcrun simctl list runtimes
        
    - name: List Available Device Types
      shell: bash
      run: |
        echo "Available device types:"
        xcrun simctl list devicetypes | grep -i iPhone
        
    - name: Create iPhone 16 iOS 18.6 Simulator
      shell: bash
      run: |
        # Check if simulator already exists
        if xcrun simctl list devices | grep -q "iPhone16-iOS18.6"; then
          echo "Simulator already exists"
        else
          echo "Creating iPhone 16 iOS 18.6 simulator"
          # Verify runtime is available
          if ! xcrun simctl list runtimes | grep -q "iOS 18.6"; then
            echo "Error: iOS 18.6 runtime is not available after download"
            echo "Available runtimes:"
            xcrun simctl list runtimes
            exit 1
          fi
          
          # Create simulator
          xcrun simctl create "iPhone16-iOS18.6" "com.apple.CoreSimulator.SimDeviceType.iPhone-16" "com.apple.CoreSimulator.SimRuntime.iOS-18-6"
        fi
                
    - name: List Available Simulators
      shell: bash
      run: |
        echo "Available simulators:"
        xcrun simctl list devices

    - name: Fix-up private Github URLs
      shell: bash
      run: find . -type f \( -name '*.pbxproj' -o -name 'Package.swift' -o -name 'Package.resolved' \) -exec sed -i '' "s/https:\/\/github.com\/${GITHUB_REPOSITORY_OWNER}/https:\/\/${GITHUB_ACCESS_TOKEN}@github.com\/${GITHUB_REPOSITORY_OWNER}/g" {} \;
      env:
        GITHUB_ACCESS_TOKEN: ${{ inputs.core-token }}

    - uses: actions/setup-python@v4
      with:
        python-version: '3.12.2'
        cache: 'pip'

    - name: Install gems
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.3
        bundler-cache: true

    - name: Install npm
      uses: bahmutov/npm-install@v1
      
    - name: Restore SPM Cache
      id: restore-spm-cache
      uses: actions/cache/restore@v3
      with:
        path: SourcePackages/
        key: ${{ runner.os }}-spm-cache-${{ hashFiles('firefox-ios/Client.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved') }}

    - name: Install SPM if cache not found
      shell: bash
      if: steps.restore-spm-cache.outputs.cache-hit != 'true'
      run: xcodebuild -resolvePackageDependencies -clonedSourcePackagesDirPath "firefox-ios/SourcePackages/"

    - name: Save SPM Cache if needed
      if: steps.restore-spm-cache.outputs.cache-hit != 'true'
      uses: actions/cache/save@v3
      with:
        path: firefox-ios/SourcePackages/
        key: ${{ runner.os }}-spm-cache-${{ hashFiles('firefox-ios/Client.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved') }}  

    - name: Extract Staging XCConfig
      shell: bash
      run: echo "$STAGING_XCCONFIG" | base64 --decode > firefox-ios/Client/Configuration/Staging.xcconfig

    - name: Run bootstrap script
      shell: bash
      run: ./bootstrap.sh